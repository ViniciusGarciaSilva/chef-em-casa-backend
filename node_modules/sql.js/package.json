{
  "_args": [
    [
      {
        "raw": "sql.js@latest",
        "scope": null,
        "escapedName": "sql.js",
        "name": "sql.js",
        "rawSpec": "latest",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Projetos\\chef-em-casa-backend\\node_modules\\sqlite-sync"
    ]
  ],
  "_from": "sql.js@latest",
  "_id": "sql.js@0.5.0",
  "_inCache": true,
  "_location": "/sql.js",
  "_nodeVersion": "4.1.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sql.js-0.5.0.tgz_1514853865055_0.3743011506740004"
  },
  "_npmUser": {
    "name": "lovasoa",
    "email": "pere.jobs@gmail.com"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sql.js@latest",
    "scope": null,
    "escapedName": "sql.js",
    "name": "sql.js",
    "rawSpec": "latest",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/sqlite-sync"
  ],
  "_resolved": "https://registry.npmjs.org/sql.js/-/sql.js-0.5.0.tgz",
  "_shasum": "f880dea18280a840e41df2209dc967422dfa8d81",
  "_shrinkwrap": null,
  "_spec": "sql.js@latest",
  "_where": "C:\\Projetos\\chef-em-casa-backend\\node_modules\\sqlite-sync",
  "bugs": {
    "url": "https://github.com/kripken/sql.js/issues",
    "email": "pere.jobs@gmail.com"
  },
  "contributors": [
    {
      "name": "Ophir LOJKINE",
      "email": "pere.jobs@gmail.com",
      "url": "https://github.com/lovasoa"
    },
    {
      "name": "@kripken"
    },
    {
      "name": "@hankinsoft"
    },
    {
      "name": "@firien"
    },
    {
      "name": "@dinedal"
    }
  ],
  "dependencies": {},
  "description": "SQLite library with support for opening and writing databases, prepared statements, and more. This SQLite library is in pure javascript (compiled with emscripten).",
  "devDependencies": {
    "test": ">=0.6",
    "workerjs": ">=0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "f880dea18280a840e41df2209dc967422dfa8d81",
    "tarball": "https://registry.npmjs.org/sql.js/-/sql.js-0.5.0.tgz"
  },
  "gitHead": "66f0f4d55dfe3b873ddf4154406ae4191892f7e3",
  "homepage": "http://github.com/kripken/sql.js",
  "keywords": [
    "sql",
    "sqlite",
    "stand-alone",
    "relational",
    "database",
    "RDBMS",
    "data",
    "query",
    "statement",
    "emscripten",
    "asm",
    "asm.js"
  ],
  "license": "MIT",
  "main": "./js/sql.js",
  "maintainers": [
    {
      "name": "lovasoa",
      "email": "pere.jobs@gmail.com"
    }
  ],
  "name": "sql.js",
  "optionalDependencies": {},
  "readme": "# SQLite compiled to javascript\n[![Build Status](https://travis-ci.org/kripken/sql.js.svg?branch=master)](http://travis-ci.org/kripken/sql.js)\n\nFor the impatients, try the demo here: http://kripken.github.io/sql.js/GUI/\n\n*sql.js* is a port of [SQLite](http://sqlite.org/about.html) to JavaScript, by compiling the SQLite C code with [Emscripten](http://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html). It uses a [virtual database file stored in memory](https://kripken.github.io/emscripten-site/docs/porting/files/file_systems_overview.html), and thus **doesn't persist the changes** made to the database. However, it allows you to **import** any existing sqlite file, and to **export** the created database as a [javascript typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays).\n\nThere is no C bindings or node-gyp compilation here, sql.js is a simple javascript file, that can be used like any traditional javascript library. If you are building a native application in javascript (using Electron for instance), or are working in node.js, you will likely prefer to use [a native binding of SQLite to javascript](https://www.npmjs.com/package/sqlite3).\n\nSQLite is public domain, sql.js is MIT licensed.\n\n## Documentation\nA [full documentation](http://kripken.github.io/sql.js/documentation/#http://kripken.github.io/sql.js/documentation/class/Database.html) generated from comments inside the source code, is available.\n\n## Usage\n\n```javascript\nvar sql = require('sql.js');\n// or sql = window.SQL if you are in a browser\n\n// Create a database\nvar db = new sql.Database();\n// NOTE: You can also use new sql.Database(data) where\n// data is an Uint8Array representing an SQLite database file\n\n// Execute some sql\nsqlstr = \"CREATE TABLE hello (a int, b char);\";\nsqlstr += \"INSERT INTO hello VALUES (0, 'hello');\"\nsqlstr += \"INSERT INTO hello VALUES (1, 'world');\"\ndb.run(sqlstr); // Run the query without returning anything\n\nvar res = db.exec(\"SELECT * FROM hello\");\n/*\n[\n\t{columns:['a','b'], values:[[0,'hello'],[1,'world']]}\n]\n*/\n\n// Prepare an sql statement\nvar stmt = db.prepare(\"SELECT * FROM hello WHERE a=:aval AND b=:bval\");\n\n// Bind values to the parameters and fetch the results of the query\nvar result = stmt.getAsObject({':aval' : 1, ':bval' : 'world'});\nconsole.log(result); // Will print {a:1, b:'world'}\n\n// Bind other values\nstmt.bind([0, 'hello']);\nwhile (stmt.step()) console.log(stmt.get()); // Will print [0, 'hello']\n\n// You can also use javascript functions inside your SQL code\n// Create the js function you need\nfunction add(a, b) {return a+b;}\n// Specifies the SQL function's name, the number of it's arguments, and the js function to use\ndb.create_function(\"add_js\", add);\n// Run a query in which the function is used\ndb.run(\"INSERT INTO hello VALUES (add_js(7, 3), add_js('Hello ', 'world'));\"); // Inserts 10 and 'Hello world'\n\n// free the memory used by the statement\nstmt.free();\n// You can not use your statement anymore once it has been freed.\n// But not freeing your statements causes memory leaks. You don't want that.\n\n// Export the database to an Uint8Array containing the SQLite database file\nvar binaryArray = db.export();\n```\n\n## Demo\nThere is an online demo available here : http://kripken.github.io/sql.js/GUI\n\n## Examples\nThe test files provide up to date example of the use of the api.\n### Inside the browser\n#### Example **HTML** file:\n```html\n<script src='js/sql.js'></script>\n<script>\n    //Create the database\n    var db = new SQL.Database();\n    // Run a query without reading the results\n    db.run(\"CREATE TABLE test (col1, col2);\");\n    // Insert two rows: (1,111) and (2,222)\n    db.run(\"INSERT INTO test VALUES (?,?), (?,?)\", [1,111,2,222]);\n\n    // Prepare a statement\n    var stmt = db.prepare(\"SELECT * FROM test WHERE col1 BETWEEN $start AND $end\");\n    stmt.getAsObject({$start:1, $end:1}); // {col1:1, col2:111}\n\n    // Bind new values\n    stmt.bind({$start:1, $end:2});\n    while(stmt.step()) { //\n        var row = stmt.getAsObject();\n        // [...] do something with the row of result\n    }\n</script>\n```\n\n#### Creating a database from a file choosen by the user\n`SQL.Database` constructor takes an array of integer representing a database file as an optional parameter.\nThe following code uses an HTML input as the source for loading a database:\n```javascript\ndbFileElm.onchange = function() {\n\tvar f = dbFileElm.files[0];\n\tvar r = new FileReader();\n\tr.onload = function() {\n\t\tvar Uints = new Uint8Array(r.result);\n\t\tdb = new SQL.Database(Uints);\n\t}\n\tr.readAsArrayBuffer(f);\n}\n```\nSee : http://kripken.github.io/sql.js/GUI/gui.js\n\n#### Loading a database from a server\n\n```javascript\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', '/path/to/database.sqlite', true);\nxhr.responseType = 'arraybuffer';\n\nxhr.onload = function(e) {\n  var uInt8Array = new Uint8Array(this.response);\n  var db = new SQL.Database(uInt8Array);\n  var contents = db.exec(\"SELECT * FROM my_table\");\n  // contents is now [{columns:['col1','col2',...], values:[[first row], [second row], ...]}]\n};\nxhr.send();\n```\nSee: https://github.com/kripken/sql.js/wiki/Load-a-database-from-the-server\n\n\n### Use from node.js\n\n`sql.js` is [hosted on npm](https://www.npmjs.org/package/sql.js). To install it, you can simply run `npm install sql.js`.\nAlternatively, you can simply download the file `sql.js`, from the download link below.\n\n#### read a database from the disk:\n```javascript\nvar fs = require('fs');\nvar SQL = require('sql.js');\nvar filebuffer = fs.readFileSync('test.sqlite');\n\n// Load the db\nvar db = new SQL.Database(filebuffer);\n```\n\n#### write a database to the disk\nYou need to convert the result of `db.export` to a buffer\n```javascript\nvar fs = require(\"fs\");\n// [...] (create the database)\nvar data = db.export();\nvar buffer = new Buffer(data);\nfs.writeFileSync(\"filename.sqlite\", buffer);\n```\n\nSee : https://github.com/kripken/sql.js/blob/master/test/test_node_file.js\n\n### Use as web worker\nIf you don't want to run CPU-intensive SQL queries in your main application thread,\nyou can use the *more limited* WebWorker API.\n\nYou will need to download `worker.sql.js`\n\nExample:\n```html\n<script>\nvar worker = new Worker(\"js/worker.sql.js\"); // You can find worker.sql.js in this repo\nworker.onmessage = function() {\n\tconsole.log(\"Database opened\");\n\tworker.onmessage = function(event){\n\t\tconsole.log(event.data); // The result of the query\n\t};\n\tworker.postMessage({\n\t\tid: 2,\n\t\taction: 'exec',\n\t\tsql: 'SELECT * FROM test'\n\t});\n};\n\nworker.onerror = function(e) {console.log(\"Worker error: \", e)};\nworker.postMessage({\n\tid:1,\n\taction:'open',\n\tbuffer:buf, /*Optional. An ArrayBuffer representing an SQLite Database file*/\n});\n</script>\n```\n\nSee : https://github.com/kripken/sql.js/blob/master/test/test_worker.js\n\n## Downloads\n - You can download `sql.js` here : https://raw.githubusercontent.com/kripken/sql.js/master/js/sql.js\n - And the Web Worker version: https://raw.githubusercontent.com/kripken/sql.js/master/js/worker.sql.js\n - You can find a non minified or optimized version for debugging, `sql-debug.js` here : https://raw.githubusercontent.com/kripken/sql.js/master/js/sql-debug.js\n - If you see the message, `Cannot enlarge memory arrays`, try this version, `sql-memory-growth.js` here : https://raw.githubusercontent.com/kripken/sql.js/master/js/sql-memory-growth.js\n\n## Related\n\n* [In-Browser/Client-Side Demo](http://kripken.github.io/sql.js/GUI/)\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/kripken/sql.js.git"
  },
  "scripts": {
    "test": "node test/all.js"
  },
  "version": "0.5.0"
}
